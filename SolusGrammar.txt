
Root = space* Expression space*;

Expression = (	VariableAccess | 
				FunctionCall | 
				NumberLiteral |
				StringLiteral |
				Operation |
				Parenthesis |
				Index );

space = (' '|'\t'|'\r'|'\n'|comment);
comment = '/*' [^*]* ( '*' [^/] [^*]* )* '*/';
digit = [0-9];

VariableAccess = Identifier:Name;
FunctionCall = Identifier:Name space* '(' space* ( Expression:Args space* ( ',' space* Expression:Args space* )* )? ')';
Parenthesis = '(' space* Expression:Expression space* ')';
Identifier = (Identifier:Scope '::' )? [a-zA-Z_]:Chars [a-zA-Z_0-9]*:Chars;
Index = IndexableExpression:Value space* '[' space* Expression:Index space* ']';
IndexableExpression = ( VariableAccess | 
						FunctionCall | 
						StringLiteral |
						Parenthesis |
						Index );

NumberLiteral = (	digit+ '.'? | 
					digit* '.' digit+ ([eE] [+-]? digit+) | 
					'0' [xX] [a-fA-F0-9]+ | 
					'0' [bB] [01]+ | 
					'0' [oO] [0-7]+ | 
					'0' [dD] digit+ | 
StringLiteral = '"' [^\\"]* ( '\\' [\\"] [^\\"]* )* '"';

OperableExpression = (	VariableAccess | 
						FunctionCall | 
						NumberLiteral |
						StringLiteral |
						Parenthesis |
						Index );

Operation = OperationAssignmentOrGreater;

OperationAssignmentOrGreater = ( AssignmentOperation | OperationGreaterThanAssignment );
OperationGreaterThanAssignment = OperationTernaryConditionalOrGreater;
OperationTernaryConditionalOrGreater = ( TernaryConditionalOperation | OperationGreaterThanTernaryConditional );
OperationGreaterThanTernaryConditional = OperationLogicalOrOrGreater;
OperationLogicalOrOrGreater = ( LogicalOrOperation | OperationGreaterThanLogicalOr );
OperationGreaterThanLogicalOr = OperationLogicalAndOrGreater;
OperationLogicalAndOrGreater = ( LogicalAndOperation | OperationGreaterThanLogicalAnd );
OperationGreaterThanLogicalAnd = OperationBitwiseOrOrGreater;
OperationBitwiseOrOrGreater = ( BitwiseOrOperation | OperationGreaterThanBitwiseOr );
OperationGreaterThanBitwiseOr = OperationBitwiseXorOrGreater;
OperationBitwiseXorOrGreater = ( BitwiseXorOperation | OperationGreaterThanBitwiseXor );
OperationGreaterThanBitwiseXor = OperationBitwiseAndOrGreater;
OperationBitwiseAndOrGreater = ( BitwiseAndOperation | OperationGreaterThanBitwiseAnd );
OperationGreaterThanBitwiseAnd = OperationEqualityOrGreater;
OperationEqualityOrGreater = ( EqualityOperation | OperationGreaterThanEquality );
OperationGreaterThanEquality = OperationComparisonOrGreater;
OperationComparisonOrGreater = ( ComparisonOperation | OperationGreaterThanComparison );
OperationGreaterThanComparison = OperationShiftOrGreater;
OperationShiftOrGreater = ( ShiftOperation | OperationGreaterThanShift );
OperationGreaterThanShift = OperationAdditionOrGreater;
OperationAdditionOrGreater = ( AdditionOperation | OperationGreaterThanAddition );
OperationGreaterThanAddition = OperationMultiplicationOrGreater;
OperationMultiplicationOrGreater = ( MultiplicationOperation | OperationGreaterThanMultiplication );
OperationGreaterThanMultiplication = OperationPrefixUnaryOrGreater;
OperationPrefixUnaryOrGreater = ( PrefixUnaryOperation | OperationGreaterThanPrefixUnary );
OperationGreaterThanPrefixUnary = OperationExponentOrGreater;
OperationExponentOrGreater = ( ExponentOperation | OperationGreaterThanExponent );
OperationGreaterThanExponent = OperationFactorialOrGreater;
OperationFactorialOrGreater = ( FactorialOperation );

PrefixUnaryOperation = ( PrefixUnaryOperator:Op ( OperableExpression:Expr | OperationExponentOrGreater ) );
PrefixUnaryOperator = [~!-+];
FactorialOperation = ( ( OperableExpression:Expr | OperationFactorialOrGreater ) space* '!' );
ExponentOperation = ( OperableExpression:Left | OperationGreaterThanExponent:Left ) space* '^' space* ( OperableExpression:Right | OperationExponentOrGreater:Right );
MultiplicationOperation = ( OperableExpression:Left | OperationMultiplicationOrGreater:Left ) space* [*/%]:Operator space* ( OperableExpression:Right | OperationMultiplicationOrGreater:Right );
AdditionOperation = ( OperableExpression:Left | OperationAdditionOrGreater:Left ) space* [+-]:Operator space* ( OperableExpression:Right | OperationAdditionOrGreater:Right );
ShiftOperation = ( OperableExpression:Left | OperationShiftOrGreater:Left ) space* ('<<':Operator|'>>':Operator) space* ( OperableExpression:Right | OperationShiftOrGreater:Right );
ComparisonOperation = ( OperableExpression:Left | OperationComparisonOrGreater:Left ) space* ([<>]:Operator|'<=':Operator|'>=':Operator) space* ( OperableExpression:Right | OperationComparisonOrGreater:Right );
EqualityOperation = ( OperableExpression:Left | OperationEqualityOrGreater:Left ) space* ('==':Operator|'!=':Operator) space* ( OperableExpression:Right | OperationEqualityOrGreater:Right );
BitwiseAndOperation = ( OperableExpression:Left | OperationBitwiseAndOrGreater:Left ) space* '&' space* ( OperableExpression:Right | OperationBitwiseAndOrGreater:Right );
//BitwiseXorOperation = ( OperableExpression:Left | OperationBitwiseXorOrGreater:Left ) space* '$' space* ( OperableExpression:Right | OperationBitwiseXorOrGreater:Right );
BitwiseOrOperation = ( OperableExpression:Left | OperationBitwiseOrOrGreater:Left ) space* '|' space* ( OperableExpression:Right | OperationBitwiseOrOrGreater:Right );
LogicalAndOperation = ( OperableExpression:Left | OperationLogicalAndOrGreater:Left ) space* '&&' space* ( OperableExpression:Right | OperationLogicalAndOrGreater:Right );
LogicalOrOperation = ( OperableExpression:Left | OperationLogicalOrOrGreater:Left ) space* '||' space* ( OperableExpression:Right | OperationLogicalOrOrGreater:Right );
TernaryConditionalOperation = OperationTernaryConditionalOrGreater space* '?' space* Expression space* ':' space* OperationGreaterThanTernary;
AssignmentOperation = ( OperableExpression:Left | OperationAssignmentOrGreater:Left ) space* 
							('=':Operator|'^=':Operator|'&=':Operator|
							'|=':Operator|'&&=':Operator|'||=':Operator|
							'>>=':Operator|'<<=':Operator|'+=':Operator|
							'-=':Operator|'*=':Operator|'/=':Operator|
							'%=':Operator|'+=':Operator)
						space* ( OperableExpression:Right | OperationAssignmentOrGreater:Right );


//operator precedence
/////////////////////
//factorial
//exponent
//bitwise not, logical not, unary minus, unary plus
//multiplication,division,modulus
//addition,subtraction
//left shift, right shift (arithmetic? logical?)
//less, less-equal, greater, greater-equal
//equal,not equal
//bitwise and
//bitwise xor
//bitwise or
//logical and
//logical or
//ternary conditional
//assignment, and its ilk
//throw?
//comma?



//operator precedence for psh.pl
///////////////////////////////////
//@a = ();
//@lines = split/\s*[\r\n]+\s*/,$d;
//for $line (@lines)
//{
//  if ($line =~ /^(.*)`/)
//  {
//    $line = ucfirst $1;
//  }
//  else
//  {
//    $line = join'',map{ucfirst}split/\s+/,$line;
//  }
//  push @a, "${line}Operation = ";
//}
//print "\n";
//for $line (reverse @lines)
//{
//  print "Operation${line}OrGreater;\n";
//  print "Operation${line}OrGreater = ( ${line}Operation | OperationGreaterThan$line );\n";
//  print "OperationGreaterThan$line = ";
//}
//print "\n";
//map{print"$_\n"}@a;
