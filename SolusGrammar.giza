
/*
 *  MetaphysicsIndustries.Solus
 *  Copyright (C) 2006-2022 Metaphysics Industries, Inc., Richard Sartor
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
 *  USA
 *
 */


commands = ( command ';' )* command ';'? ;

command = (
    help-command |
    var-assign-command |
    func-assign-command |
    vars-command |
    delete-command
);

help-command = 'help' identifier?:topic;
var-assign-command = varref ':=' expr;
func-assign-command = identifier:name
    '(' ( identifier:param ( ',' identifier:param )* )? ')'
    ':=' expr ;
vars-command = ( 'vars' | 'variables' );
delete-command = 'delete' varref varref* ;

expr = subexpr ( binop subexpr )*;

<ignore case, token> number = (
    '0b' [01]+ |
    '0o' [01234567]+ |
    '0x' [\dabcdef]+ |
     float-number
);

// non-atomic, usable by the spanner
<ignore case, subtoken> float-number = [+-]? [\d]+ ( '.' [\d]+ )? ( [eE] [+-]? [\d]+ )? ;

<token> string = (
    '\'' ( [^\\'] | '\\' [rnt\\'] | unicodechar )+ '\'' |
    '"' ( [^\\"] | '\\' [rnt\\"] | unicodechar )+ '"'
);

<ignore case, subtoken> unicodechar = '\\x' [\dabcdef][\dabcdef][\dabcdef][\dabcdef];

<token> binop = ( [+-*/%^&|=<>] | '!=' | '<=' | '>=' );

unary-op = [+-] (
    paren |
    function-call-or-component-access |
    string |
    unary-op |
    varref |
    array-literal
);

subexpr = (
    paren |
    function-call-or-component-access |
    number |
    string |
    unary-op |
    varref |
    array-literal
);

paren = '(' expr ')';

varref = identifier;

<token> identifier = [\w] [\d\w_]*;

array-literal = '[' expr ( ',' expr )* ','?
              ( ';' expr ( ',' expr )* ','? )* ';'? ']';

function-call-or-component-access =
    call-comp-subexpr:target ( call-args | array-index )+;

call-args = '(' ( expr:arg ( ',' expr:arg )* ','? )? ')';

call-comp-subexpr = (
    paren |
    string |
    varref |
    array-literal
);

array-index = '[' expr ( ',' expr )* ','? ']';

// TODO: <expr> instead of <number> -> requires taking env out of parsing
interval = [\[(] number ',' number [\])];

var-interval = (
    varref 'in' interval |
    expr ( '<' | '<=' ) varref ( '<' | '<=' ) expr
);
